<?php
/**
 * PriceList
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * PriceList Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PriceList implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => '\BrightpearlApiClient\Model\PriceListName',
        'code' => 'string',
        'currency_code' => 'string',
        'currency_symbol' => 'string',
        'currency_id' => 'int',
        'price_list_type_code' => 'string',
        'gross' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'currency_code' => 'currencyCode',
        'currency_symbol' => 'currencySymbol',
        'currency_id' => 'currencyId',
        'price_list_type_code' => 'priceListTypeCode',
        'gross' => 'gross'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'currency_code' => 'setCurrencyCode',
        'currency_symbol' => 'setCurrencySymbol',
        'currency_id' => 'setCurrencyId',
        'price_list_type_code' => 'setPriceListTypeCode',
        'gross' => 'setGross'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'currency_code' => 'getCurrencyCode',
        'currency_symbol' => 'getCurrencySymbol',
        'currency_id' => 'getCurrencyId',
        'price_list_type_code' => 'getPriceListTypeCode',
        'gross' => 'getGross'
    );
  
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $name 
      * @var \BrightpearlApiClient\Model\PriceListName
      */
    protected $name;
    
    /**
      * $code 
      * @var string
      */
    protected $code;
    
    /**
      * $currency_code 
      * @var string
      */
    protected $currency_code;
    
    /**
      * $currency_symbol 
      * @var string
      */
    protected $currency_symbol;
    
    /**
      * $currency_id 
      * @var int
      */
    protected $currency_id;
    
    /**
      * $price_list_type_code 
      * @var string
      */
    protected $price_list_type_code;
    
    /**
      * $gross 
      * @var bool
      */
    protected $gross;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->code = $data["code"];
            $this->currency_code = $data["currency_code"];
            $this->currency_symbol = $data["currency_symbol"];
            $this->currency_id = $data["currency_id"];
            $this->price_list_type_code = $data["price_list_type_code"];
            $this->gross = $data["gross"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return \BrightpearlApiClient\Model\PriceListName
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param \BrightpearlApiClient\Model\PriceListName $name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }
  
    /**
     * Sets code
     * @param string $code 
     * @return $this
     */
    public function setCode($code)
    {
        
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currency_code;
    }
  
    /**
     * Sets currency_code
     * @param string $currency_code 
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        
        $this->currency_code = $currency_code;
        return $this;
    }
    
    /**
     * Gets currency_symbol
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->currency_symbol;
    }
  
    /**
     * Sets currency_symbol
     * @param string $currency_symbol 
     * @return $this
     */
    public function setCurrencySymbol($currency_symbol)
    {
        
        $this->currency_symbol = $currency_symbol;
        return $this;
    }
    
    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }
  
    /**
     * Sets currency_id
     * @param int $currency_id 
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        
        $this->currency_id = $currency_id;
        return $this;
    }
    
    /**
     * Gets price_list_type_code
     * @return string
     */
    public function getPriceListTypeCode()
    {
        return $this->price_list_type_code;
    }
  
    /**
     * Sets price_list_type_code
     * @param string $price_list_type_code 
     * @return $this
     */
    public function setPriceListTypeCode($price_list_type_code)
    {
        
        $this->price_list_type_code = $price_list_type_code;
        return $this;
    }
    
    /**
     * Gets gross
     * @return bool
     */
    public function getGross()
    {
        return $this->gross;
    }
  
    /**
     * Sets gross
     * @param bool $gross 
     * @return $this
     */
    public function setGross($gross)
    {
        
        $this->gross = $gross;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
