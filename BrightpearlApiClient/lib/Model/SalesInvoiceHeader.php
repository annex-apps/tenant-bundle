<?php
/**
 * SalesInvoiceHeader
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * SalesInvoiceHeader Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesInvoiceHeader implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'contact_id' => 'int',
        'exchange_rate' => 'Number',
        'order_id' => 'int',
        'due_date' => 'string',
        'description' => 'string',
        'currency_id' => 'int',
        'tax_date' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'contact_id' => 'contactId',
        'exchange_rate' => 'exchangeRate',
        'order_id' => 'orderId',
        'due_date' => 'dueDate',
        'description' => 'description',
        'currency_id' => 'currencyId',
        'tax_date' => 'taxDate'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'contact_id' => 'setContactId',
        'exchange_rate' => 'setExchangeRate',
        'order_id' => 'setOrderId',
        'due_date' => 'setDueDate',
        'description' => 'setDescription',
        'currency_id' => 'setCurrencyId',
        'tax_date' => 'setTaxDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'contact_id' => 'getContactId',
        'exchange_rate' => 'getExchangeRate',
        'order_id' => 'getOrderId',
        'due_date' => 'getDueDate',
        'description' => 'getDescription',
        'currency_id' => 'getCurrencyId',
        'tax_date' => 'getTaxDate'
    );
  
    
    /**
      * $contact_id 
      * @var int
      */
    protected $contact_id;
    
    /**
      * $exchange_rate 
      * @var Number
      */
    protected $exchange_rate;
    
    /**
      * $order_id 
      * @var int
      */
    protected $order_id;
    
    /**
      * $due_date 
      * @var string
      */
    protected $due_date;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $currency_id 
      * @var int
      */
    protected $currency_id;
    
    /**
      * $tax_date 
      * @var string
      */
    protected $tax_date;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->contact_id = $data["contact_id"];
            $this->exchange_rate = $data["exchange_rate"];
            $this->order_id = $data["order_id"];
            $this->due_date = $data["due_date"];
            $this->description = $data["description"];
            $this->currency_id = $data["currency_id"];
            $this->tax_date = $data["tax_date"];
        }
    }
    
    /**
     * Gets contact_id
     * @return int
     */
    public function getContactId()
    {
        return $this->contact_id;
    }
  
    /**
     * Sets contact_id
     * @param int $contact_id 
     * @return $this
     */
    public function setContactId($contact_id)
    {
        
        $this->contact_id = $contact_id;
        return $this;
    }
    
    /**
     * Gets exchange_rate
     * @return Number
     */
    public function getExchangeRate()
    {
        return $this->exchange_rate;
    }
  
    /**
     * Sets exchange_rate
     * @param Number $exchange_rate 
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        
        $this->exchange_rate = $exchange_rate;
        return $this;
    }
    
    /**
     * Gets order_id
     * @return int
     */
    public function getOrderId()
    {
        return $this->order_id;
    }
  
    /**
     * Sets order_id
     * @param int $order_id 
     * @return $this
     */
    public function setOrderId($order_id)
    {
        
        $this->order_id = $order_id;
        return $this;
    }
    
    /**
     * Gets due_date
     * @return string
     */
    public function getDueDate()
    {
        return $this->due_date;
    }
  
    /**
     * Sets due_date
     * @param string $due_date 
     * @return $this
     */
    public function setDueDate($due_date)
    {
        
        $this->due_date = $due_date;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets currency_id
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }
  
    /**
     * Sets currency_id
     * @param int $currency_id 
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        
        $this->currency_id = $currency_id;
        return $this;
    }
    
    /**
     * Gets tax_date
     * @return string
     */
    public function getTaxDate()
    {
        return $this->tax_date;
    }
  
    /**
     * Sets tax_date
     * @param string $tax_date 
     * @return $this
     */
    public function setTaxDate($tax_date)
    {
        
        $this->tax_date = $tax_date;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
