<?php
/**
 * SalesChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * SalesChannel Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SalesChannel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'sales_channel_name' => 'string',
        'product_name' => 'string',
        'product_condition' => 'string',
        'categories' => '\BrightpearlApiClient\Model\SalesChannelCategories[]',
        'description' => '\BrightpearlApiClient\Model\SalesChannelDescription',
        'short_description' => '\BrightpearlApiClient\Model\SalesChannelShortDescription'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'sales_channel_name' => 'salesChannelName',
        'product_name' => 'productName',
        'product_condition' => 'productCondition',
        'categories' => 'categories',
        'description' => 'description',
        'short_description' => 'shortDescription'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'sales_channel_name' => 'setSalesChannelName',
        'product_name' => 'setProductName',
        'product_condition' => 'setProductCondition',
        'categories' => 'setCategories',
        'description' => 'setDescription',
        'short_description' => 'setShortDescription'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'sales_channel_name' => 'getSalesChannelName',
        'product_name' => 'getProductName',
        'product_condition' => 'getProductCondition',
        'categories' => 'getCategories',
        'description' => 'getDescription',
        'short_description' => 'getShortDescription'
    );
  
    
    /**
      * $sales_channel_name 
      * @var string
      */
    protected $sales_channel_name;
    
    /**
      * $product_name 
      * @var string
      */
    protected $product_name;
    
    /**
      * $product_condition 
      * @var string
      */
    protected $product_condition;
    
    /**
      * $categories 
      * @var \BrightpearlApiClient\Model\SalesChannelCategories[]
      */
    protected $categories;
    
    /**
      * $description 
      * @var \BrightpearlApiClient\Model\SalesChannelDescription
      */
    protected $description;
    
    /**
      * $short_description 
      * @var \BrightpearlApiClient\Model\SalesChannelShortDescription
      */
    protected $short_description;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->sales_channel_name = $data["sales_channel_name"];
            $this->product_name = $data["product_name"];
            $this->product_condition = $data["product_condition"];
            $this->categories = $data["categories"];
            $this->description = $data["description"];
            $this->short_description = $data["short_description"];
        }
    }
    
    /**
     * Gets sales_channel_name
     * @return string
     */
    public function getSalesChannelName()
    {
        return $this->sales_channel_name;
    }
  
    /**
     * Sets sales_channel_name
     * @param string $sales_channel_name 
     * @return $this
     */
    public function setSalesChannelName($sales_channel_name)
    {
//        $allowed_values = array("Brightpearl");
//        if (!in_array($sales_channel_name, $allowed_values)) {
//        }
        $sales_channel_name = "Brightpearl";
        $this->sales_channel_name = $sales_channel_name;
        return $this;
    }
    
    /**
     * Gets product_name
     * @return string
     */
    public function getProductName()
    {
        return $this->product_name;
    }
  
    /**
     * Sets product_name
     * @param string $product_name 
     * @return $this
     */
    public function setProductName($product_name)
    {
        
        $this->product_name = $product_name;
        return $this;
    }
    
    /**
     * Gets product_condition
     * @return string
     */
    public function getProductCondition()
    {
        return $this->product_condition;
    }
  
    /**
     * Sets product_condition
     * @param string $product_condition 
     * @return $this
     */
    public function setProductCondition($product_condition)
    {
        $allowed_values = array("new", "used", "refurbished");
        if (!in_array($product_condition, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'product_condition', must be one of 'new', 'used', 'refurbished'");
        }
        $this->product_condition = $product_condition;
        return $this;
    }
    
    /**
     * Gets categories
     * @return \BrightpearlApiClient\Model\SalesChannelCategories[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
  
    /**
     * Sets categories
     * @param \BrightpearlApiClient\Model\SalesChannelCategories[] $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        
        $this->categories = $categories;
        return $this;
    }
    
    /**
     * Gets description
     * @return \BrightpearlApiClient\Model\SalesChannelDescription
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param \BrightpearlApiClient\Model\SalesChannelDescription $description
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets short_description
     * @return \BrightpearlApiClient\Model\SalesChannelShortDescription
     */
    public function getShortDescription()
    {
        return $this->short_description;
    }
  
    /**
     * Sets short_description
     * @param \BrightpearlApiClient\Model\SalesChannelShortDescription $short_description
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        
        $this->short_description = $short_description;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
