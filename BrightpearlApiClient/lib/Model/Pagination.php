<?php
/**
 * Pagination
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * Pagination Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Pagination implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'more_pages_available' => 'bool',
        'results_returned' => 'int',
        'first_result' => 'int',
        'last_result' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'more_pages_available' => 'morePagesAvailable',
        'results_returned' => 'resultsReturned',
        'first_result' => 'firstResult',
        'last_result' => 'lastResult'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'more_pages_available' => 'setMorePagesAvailable',
        'results_returned' => 'setResultsReturned',
        'first_result' => 'setFirstResult',
        'last_result' => 'setLastResult'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'more_pages_available' => 'getMorePagesAvailable',
        'results_returned' => 'getResultsReturned',
        'first_result' => 'getFirstResult',
        'last_result' => 'getLastResult'
    );
  
    
    /**
      * $more_pages_available 
      * @var bool
      */
    protected $more_pages_available;
    
    /**
      * $results_returned 
      * @var int
      */
    protected $results_returned;
    
    /**
      * $first_result 
      * @var int
      */
    protected $first_result;
    
    /**
      * $last_result 
      * @var int
      */
    protected $last_result;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->more_pages_available = $data["more_pages_available"];
            $this->results_returned = $data["results_returned"];
            $this->first_result = $data["first_result"];
            $this->last_result = $data["last_result"];
        }
    }
    
    /**
     * Gets more_pages_available
     * @return bool
     */
    public function getMorePagesAvailable()
    {
        return $this->more_pages_available;
    }
  
    /**
     * Sets more_pages_available
     * @param bool $more_pages_available 
     * @return $this
     */
    public function setMorePagesAvailable($more_pages_available)
    {
        
        $this->more_pages_available = $more_pages_available;
        return $this;
    }
    
    /**
     * Gets results_returned
     * @return int
     */
    public function getResultsReturned()
    {
        return $this->results_returned;
    }
  
    /**
     * Sets results_returned
     * @param int $results_returned 
     * @return $this
     */
    public function setResultsReturned($results_returned)
    {
        
        $this->results_returned = $results_returned;
        return $this;
    }
    
    /**
     * Gets first_result
     * @return int
     */
    public function getFirstResult()
    {
        return $this->first_result;
    }
  
    /**
     * Sets first_result
     * @param int $first_result 
     * @return $this
     */
    public function setFirstResult($first_result)
    {
        
        $this->first_result = $first_result;
        return $this;
    }
    
    /**
     * Gets last_result
     * @return int
     */
    public function getLastResult()
    {
        return $this->last_result;
    }
  
    /**
     * Sets last_result
     * @param int $last_result 
     * @return $this
     */
    public function setLastResult($last_result)
    {
        
        $this->last_result = $last_result;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\BrightpearlApiClient\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
