<?php
/**
 * ProductServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Annex\TenantBundle\Services\BrightpearlApiClient\Api;

use Annex\TenantBundle\Services\BrightpearlApiClient\Configuration;
use Annex\TenantBundle\Services\BrightpearlApiClient\ApiClient;
use Annex\TenantBundle\Services\BrightpearlApiClient\ApiException;
use Annex\TenantBundle\Services\BrightpearlApiClient\ObjectSerializer;

/**
 * ProductServiceApi Class Doc Comment
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductServiceApi
{

    /**
     * API Client
     * @var \BrightpearlApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \BrightpearlApiClient\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \BrightpearlApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \BrightpearlApiClient\ApiClient $apiClient set the API client
     * @return ProductServiceApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getProductBrand
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20026
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductBrand($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductBrandWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getProductBrandWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductBrandWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductBrand');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postProductBrand
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Brand $brand  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductBrand($account_code, $brand)
    {
        list($response, $statusCode, $httpHeader) = $this->postProductBrandWithHttpInfo ($account_code, $brand);
        return $response; 
    }


    /**
     * postProductBrandWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Brand $brand  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductBrandWithHttpInfo($account_code, $brand)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postProductBrand');
        }
        // verify the required parameter 'brand' is set
        if ($brand === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand when calling postProductBrand');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brand";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($brand)) {
            $_tempBody = $brand;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getBrandSearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getBrandSearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getBrandSearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getBrandSearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getBrandSearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getBrandSearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brand-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductBrandIdSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20026
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductBrandIdSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductBrandIdSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getProductBrandIdSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductBrandIdSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductBrandIdSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductBrandIdSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brand/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20026', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCategory
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20027
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategory($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getCategoryWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getCategoryWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategoryWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getCategory');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brightpearl-category";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postCategory
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Category $category  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postCategory($account_code, $category)
    {
        list($response, $statusCode, $httpHeader) = $this->postCategoryWithHttpInfo ($account_code, $category);
        return $response; 
    }


    /**
     * postCategoryWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Category $category  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postCategoryWithHttpInfo($account_code, $category)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling postCategory');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brightpearl-category";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($category)) {
            $_tempBody = $category;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCategorySearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategorySearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCategorySearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getCategorySearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategorySearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getCategorySearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brightpearl-category-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCategoryIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20027
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategoryIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getCategoryIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getCategoryIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getCategoryIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getCategoryIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getCategoryIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/brightpearl-category/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20027', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getChannel
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\ChannelGetResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getChannel($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getChannelWithHttpInfo ($account_code);
        return $response; 
    }

    /**
     * getChannelWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20028, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getChannelWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getChannel');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/channel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));

        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20028'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20028', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20028', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getChannelIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\ChannelGetResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getChannelIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getChannelIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getChannelIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\ChannelGetResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getChannelIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getChannelIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getChannelIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/channel/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\ChannelGetResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\ChannelGetResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\ChannelGetResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getOption
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20029
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOption($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getOptionWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getOptionWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getOption');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postOption
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Option $option  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postOption($account_code, $option)
    {
        list($response, $statusCode, $httpHeader) = $this->postOptionWithHttpInfo ($account_code, $option);
        return $response; 
    }


    /**
     * postOptionWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Option $option  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postOptionWithHttpInfo($account_code, $option)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postOption');
        }
        // verify the required parameter 'option' is set
        if ($option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option when calling postOption');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($option)) {
            $_tempBody = $option;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getOptionSearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionSearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getOptionSearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getOptionSearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionSearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getOptionSearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getOptionValueSearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionValueSearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getOptionValueSearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getOptionValueSearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionValueSearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getOptionValueSearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option-value-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $filters;
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getOptionIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20029
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getOptionIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getOptionIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20029, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getOptionIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getOptionIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getOptionIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20029', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductOptionValue
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $option_id Option ID (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20030
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductOptionValue($account_code, $option_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductOptionValueWithHttpInfo ($account_code, $option_id);
        return $response; 
    }


    /**
     * getProductOptionValueWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $option_id Option ID (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20030, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductOptionValueWithHttpInfo($account_code, $option_id)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling getProductOptionValue');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option/{OPTION-ID}/value";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "OPTION-ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20030'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20030', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20030', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\ErrorModel', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postOptionValue
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $option_id Option ID (required)
     * @param \BrightpearlApiClient\Model\OptionValue $option_value  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postOptionValue($account_code, $option_id, $option_value)
    {
        list($response, $statusCode, $httpHeader) = $this->postOptionValueWithHttpInfo ($account_code, $option_id, $option_value);
        return $response; 
    }


    /**
     * postOptionValueWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $option_id Option ID (required)
     * @param \BrightpearlApiClient\Model\OptionValue $option_value  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postOptionValueWithHttpInfo($account_code, $option_id, $option_value)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postOptionValue');
        }
        // verify the required parameter 'option_id' is set
        if ($option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id when calling postOptionValue');
        }
        // verify the required parameter 'option_value' is set
        if ($option_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_value when calling postOptionValue');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/option/{OPTION-ID}/value";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($option_id !== null) {
            $resourcePath = str_replace(
                "{" . "OPTION-ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($option_value)) {
            $_tempBody = $option_value;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getPriceList
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20031
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getPriceList($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getPriceListWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getPriceListWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20031, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getPriceListWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getPriceList');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/price-list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getPriceListIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20031
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getPriceListIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getPriceListIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getPriceListIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20031, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getPriceListIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getPriceListIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getPriceListIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/price-list/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20031', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postProduct
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Product $product  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProduct($account_code, $product)
    {
        list($response, $statusCode, $httpHeader) = $this->postProductWithHttpInfo ($account_code, $product);
        return $response; 
    }


    /**
     * postProductWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Product $product  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductWithHttpInfo($account_code, $product)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postProduct');
        }
        // verify the required parameter 'product' is set
        if ($product === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product when calling postProduct');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductPriceProductIDSetPriceListIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id_set IDSet (required)
     * @param string $price_list_id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20032
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductPriceProductIDSetPriceListIDSet($account_code, $product_id_set, $price_list_id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductPriceProductIDSetPriceListIDSetWithHttpInfo ($account_code, $product_id_set, $price_list_id_set);
        return $response; 
    }


    /**
     * getProductPriceProductIDSetPriceListIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id_set IDSet (required)
     * @param string $price_list_id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20032, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductPriceProductIDSetPriceListIDSetWithHttpInfo($account_code, $product_id_set, $price_list_id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductPriceProductIDSetPriceListIDSet');
        }
        // verify the required parameter 'product_id_set' is set
        if ($product_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id_set when calling getProductPriceProductIDSetPriceListIDSet');
        }
        // verify the required parameter 'price_list_id_set' is set
        if ($price_list_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id_set when calling getProductPriceProductIDSetPriceListIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-price/{PRODUCT-ID-SET}/price-list/{PRICE-LIST-ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($product_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "PRODUCT-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id_set),
                $resourcePath
            );
        }// path params
        
        if ($price_list_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "PRICE-LIST-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20032'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20032', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20032', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * optionsProductPriceProductIDSetPriceListIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id_set IDSet (required)
     * @param string $price_list_id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20010
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function optionsProductPriceProductIDSetPriceListIDSet($account_code, $product_id_set, $price_list_id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->optionsProductPriceProductIDSetPriceListIDSetWithHttpInfo ($account_code, $product_id_set, $price_list_id_set);
        return $response; 
    }


    /**
     * optionsProductPriceProductIDSetPriceListIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id_set IDSet (required)
     * @param string $price_list_id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function optionsProductPriceProductIDSetPriceListIDSetWithHttpInfo($account_code, $product_id_set, $price_list_id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling optionsProductPriceProductIDSetPriceListIDSet');
        }
        // verify the required parameter 'product_id_set' is set
        if ($product_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id_set when calling optionsProductPriceProductIDSetPriceListIDSet');
        }
        // verify the required parameter 'price_list_id_set' is set
        if ($price_list_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_list_id_set when calling optionsProductPriceProductIDSetPriceListIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-price/{PRODUCT-ID-SET}/price-list/{PRICE-LIST-ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($product_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "PRODUCT-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id_set),
                $resourcePath
            );
        }// path params
        
        if ($price_list_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "PRICE-LIST-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($price_list_id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'OPTIONS',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * putProductPriceProductIDPriceList
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id ID (required)
     * @param \BrightpearlApiClient\Model\PriceLists $price_lists  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20012
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function putProductPriceProductIDPriceList($account_code, $product_id, $price_lists)
    {
        list($response, $statusCode, $httpHeader) = $this->putProductPriceProductIDPriceListWithHttpInfo ($account_code, $product_id, $price_lists);
        return $response; 
    }


    /**
     * putProductPriceProductIDPriceListWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_id ID (required)
     * @param \BrightpearlApiClient\Model\PriceLists $price_lists  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function putProductPriceProductIDPriceListWithHttpInfo($account_code, $product_id, $price_lists)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling putProductPriceProductIDPriceList');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling putProductPriceProductIDPriceList');
        }
        // verify the required parameter 'price_lists' is set
        if ($price_lists === null) {
            throw new \InvalidArgumentException('Missing the required parameter $price_lists when calling putProductPriceProductIDPriceList');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-price/{PRODUCT-ID}/price-list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "PRODUCT-ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($price_lists)) {
            $_tempBody = $price_lists;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductSearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductSearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductSearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getProductSearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductSearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductSearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductType
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20033
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductType($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductTypeWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getProductTypeWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20033, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductTypeWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductType');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-type";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postProductType
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\ProductType $product_type  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductType($account_code, $product_type)
    {
        list($response, $statusCode, $httpHeader) = $this->postProductTypeWithHttpInfo ($account_code, $product_type);
        return $response; 
    }


    /**
     * postProductTypeWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\ProductType $product_type  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductTypeWithHttpInfo($account_code, $product_type)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postProductType');
        }
        // verify the required parameter 'product_type' is set
        if ($product_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_type when calling postProductType');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-type";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($product_type)) {
            $_tempBody = $product_type;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductTypeSearch
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return \BrightpearlApiClient\Model\SearchResponse
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductTypeSearch($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductTypeSearchWithHttpInfo ($account_code, $columns, $filters, $sort, $page_size, $first_result);
        return $response; 
    }


    /**
     * getProductTypeSearchWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $columns  (optional)
     * @param string $filters  (optional)
     * @param string $sort  (optional)
     * @param int $page_size  (optional)
     * @param int $first_result  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductTypeSearchWithHttpInfo($account_code, $columns = null, $filters = null, $sort = null, $page_size = null, $first_result = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductTypeSearch');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-type-search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }// query params
        
        if ($filters !== null) {
            $queryParams['filters'] = $this->apiClient->getSerializer()->toQueryValue($filters);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }// query params
        
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }// query params
        
        if ($first_result !== null) {
            $queryParams['firstResult'] = $this->apiClient->getSerializer()->toQueryValue($first_result);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\SearchResponse', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductTypeIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20033
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductTypeIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductTypeIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getProductTypeIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20033, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductTypeIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductTypeIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductTypeIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-type/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20033', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postProductTypeIDSetOptionAssociationIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_type_id_set IDSet (required)
     * @param string $option_id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20012
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductTypeIDSetOptionAssociationIDSet($account_code, $product_type_id_set, $option_id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->postProductTypeIDSetOptionAssociationIDSetWithHttpInfo ($account_code, $product_type_id_set, $option_id_set);
        return $response; 
    }


    /**
     * postProductTypeIDSetOptionAssociationIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $product_type_id_set IDSet (required)
     * @param string $option_id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postProductTypeIDSetOptionAssociationIDSetWithHttpInfo($account_code, $product_type_id_set, $option_id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postProductTypeIDSetOptionAssociationIDSet');
        }
        // verify the required parameter 'product_type_id_set' is set
        if ($product_type_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_type_id_set when calling postProductTypeIDSetOptionAssociationIDSet');
        }
        // verify the required parameter 'option_id_set' is set
        if ($option_id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $option_id_set when calling postProductTypeIDSetOptionAssociationIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product-type/{PRODUCT-TYPE-ID-SET}/option-association/{OPTION-ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($product_type_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "PRODUCT-TYPE-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_type_id_set),
                $resourcePath
            );
        }// path params
        
        if ($option_id_set !== null) {
            $resourcePath = str_replace(
                "{" . "OPTION-ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($option_id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20012', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductCustomFieldMetaData
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20034
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductCustomFieldMetaData($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductCustomFieldMetaDataWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getProductCustomFieldMetaDataWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20034, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductCustomFieldMetaDataWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductCustomFieldMetaData');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductCustomFieldMetaData');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/custom-field-meta-data/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20034'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20034', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20034', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @param string $context_channel_id  (optional)
     * @param string $include_optional  (optional)
     * @return \BrightpearlApiClient\Model\InlineResponse20035
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSet($account_code, $id_set, $context_channel_id = null, $include_optional = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductIDSetWithHttpInfo ($account_code, $id_set, $context_channel_id, $include_optional);
        return $response; 
    }


    /**
     * getProductIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @param string $context_channel_id  (optional)
     * @param string $include_optional  (optional)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20035, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSetWithHttpInfo($account_code, $id_set, $context_channel_id = null, $include_optional = null)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($context_channel_id !== null) {
            $queryParams['contextChannelId'] = $this->apiClient->getSerializer()->toQueryValue($context_channel_id);
        }// query params
        
        if ($include_optional !== null) {
            $queryParams['includeOptional'] = $this->apiClient->getSerializer()->toQueryValue($include_optional);
        }
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20035'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20035', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20035', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * optionProductIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20010
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function optionProductIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->optionProductIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * optionProductIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function optionProductIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling optionProductIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling optionProductIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'OPTIONS',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20010', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductIDSetBundle
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20036
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSetBundle($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductIDSetBundleWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getProductIDSetBundleWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20036, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSetBundleWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductIDSetBundle');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductIDSetBundle');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID-SET}/bundle";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20036'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20036', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20036', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductIDSetSupplier
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20037
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSetSupplier($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductIDSetSupplierWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getProductIDSetSupplierWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20037, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIDSetSupplierWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductIDSetSupplier');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getProductIDSetSupplier');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID-SET}/supplier";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20037'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20037', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20037', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getProductIdCustomField
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id ID (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20038
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIdCustomField($account_code, $id)
    {
        list($response, $statusCode, $httpHeader) = $this->getProductIdCustomFieldWithHttpInfo ($account_code, $id);
        return $response; 
    }


    /**
     * getProductIdCustomFieldWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id ID (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20038, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getProductIdCustomFieldWithHttpInfo($account_code, $id)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getProductIdCustomField');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getProductIdCustomField');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID}/custom-field";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * patchProductIDCustomField
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id ID (required)
     * @param \BrightpearlApiClient\Model\Patch[] $custom_field_patch  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20038
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function patchProductIDCustomField($account_code, $id, $custom_field_patch)
    {
        list($response, $statusCode, $httpHeader) = $this->patchProductIDCustomFieldWithHttpInfo ($account_code, $id, $custom_field_patch);
        return $response; 
    }


    /**
     * patchProductIDCustomFieldWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id ID (required)
     * @param \BrightpearlApiClient\Model\Patch[] $custom_field_patch  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20038, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function patchProductIDCustomFieldWithHttpInfo($account_code, $id, $custom_field_patch)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling patchProductIDCustomField');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling patchProductIDCustomField');
        }
        // verify the required parameter 'custom_field_patch' is set
        if ($custom_field_patch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_patch when calling patchProductIDCustomField');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/product/{ID}/custom-field";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($custom_field_patch)) {
            $_tempBody = $custom_field_patch;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PATCH',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20038', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSeason
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20039
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getSeason($account_code)
    {
        list($response, $statusCode, $httpHeader) = $this->getSeasonWithHttpInfo ($account_code);
        return $response; 
    }


    /**
     * getSeasonWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20039, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getSeasonWithHttpInfo($account_code)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getSeason');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/season";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * postSeason
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Season $season  (required)
     * @return \BrightpearlApiClient\Model\InlineResponse200
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postSeason($account_code, $season)
    {
        list($response, $statusCode, $httpHeader) = $this->postSeasonWithHttpInfo ($account_code, $season);
        return $response; 
    }


    /**
     * postSeasonWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param \BrightpearlApiClient\Model\Season $season  (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function postSeasonWithHttpInfo($account_code, $season)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling postSeason');
        }
        // verify the required parameter 'season' is set
        if ($season === null) {
            throw new \InvalidArgumentException('Missing the required parameter $season when calling postSeason');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/season";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($season)) {
            $_tempBody = $season;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getSeasonIDSet
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return \BrightpearlApiClient\Model\InlineResponse20039
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getSeasonIDSet($account_code, $id_set)
    {
        list($response, $statusCode, $httpHeader) = $this->getSeasonIDSetWithHttpInfo ($account_code, $id_set);
        return $response; 
    }


    /**
     * getSeasonIDSetWithHttpInfo
     *
     * 
     *
     * @param string $account_code The account code for the Brightpearl account (required)
     * @param string $id_set IDSet (required)
     * @return Array of Annex\TenantBundle\BrightpearlApiClient\Model\InlineResponse20039, HTTP status code, HTTP response headers (array of strings)
     * @throws \BrightpearlApiClient\ApiException on non-2xx response
     */
    public function getSeasonIDSetWithHttpInfo($account_code, $id_set)
    {
        
        // verify the required parameter 'account_code' is set
        if ($account_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_code when calling getSeasonIDSet');
        }
        // verify the required parameter 'id_set' is set
        if ($id_set === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_set when calling getSeasonIDSet');
        }
  
        // parse inputs
        $resourcePath = "/{ACCOUNT-CODE}/product-service/season/{ID-SET}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        
        if ($account_code !== null) {
            $resourcePath = str_replace(
                "{" . "ACCOUNT-CODE" . "}",
                $this->apiClient->getSerializer()->toPathValue($account_code),
                $resourcePath
            );
        }// path params
        
        if ($id_set !== null) {
            $resourcePath = str_replace(
                "{" . "ID-SET" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_set),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('brightpearl-dev-ref');
        if (strlen($apiKey) !== 0) {
            $headerParams['brightpearl-dev-ref'] = $apiKey;
        }
        
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(ObjectSerializer::deserialize($response, '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Annex\TenantBundle\Services\BrightpearlApiClient\Model\InlineResponse20039', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
