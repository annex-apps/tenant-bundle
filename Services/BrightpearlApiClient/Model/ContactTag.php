<?php
/**
 * Tag
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Annex\TenantBundle\Services\BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * Tag Class Doc Comment
 *
 * @category    Class
 * @description
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContactTag implements ArrayAccess
{
    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    static $swaggerTypes = array(
        'tag_id' => 'int',
        'tag_name' => 'string',
        'tag_parent_id' => 'int',
        'tag_color' => 'string'
    );

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    static $attributeMap = array(
        'tag_id' => 'tagId',
        'tag_name' => 'tagName',
        'tag_parent_id' => 'tagParentId',
        'tag_color' => 'tagColor'
    );

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    static $setters = array(
        'tag_id' => 'setTagId',
        'tag_name' => 'setTagName',
        'tag_parent_id' => 'setTagParentId',
        'tag_color' => 'setTagColor'
    );

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    static $getters = array(
        'tag_id' => 'getTagId',
        'tag_name' => 'getTagName',
        'tag_parent_id' => 'getTagParentId',
        'tag_color' => 'getTagColor'
    );


    /**
     * $tag_id
     * @var int
     */
    protected $tag_id;

    /**
     * $tag_name
     * @var string
     */
    protected $tag_name;

    /**
     * $tag_parent_id
     * @var int
     */
    protected $tag_parent_id;

    /**
     * $tag_color
     * @var string
     */
    protected $tag_color;


    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->tag_id = $data["tag_id"];
            $this->tag_name = $data["tag_name"];
            $this->tag_parent_id = $data["tag_parent_id"];
            $this->tag_color = $data["tag_color"];
        }
    }

    /**
     * Gets tag_id
     * @return int
     */
    public function getTagId()
    {
        return $this->tag_id;
    }

    /**
     * Sets tag_id
     * @param int $tag_id
     * @return $this
     */
    public function setTagId($tag_id)
    {

        $this->tag_id = $tag_id;
        return $this;
    }

    /**
     * Gets tag_name
     * @return string
     */
    public function getTagName()
    {
        return $this->tag_name;
    }

    /**
     * Sets tag_name
     * @param string $tag_name
     * @return $this
     */
    public function setTagName($tag_name)
    {

        $this->tag_name = $tag_name;
        return $this;
    }

    /**
     * Gets tag_parent_id
     * @return int
     */
    public function getTagParentId()
    {
        return $this->tag_parent_id;
    }

    /**
     * Sets tag_parent_id
     * @param int $tag_parent_id
     * @return $this
     */
    public function setTagParentId($tag_parent_id)
    {

        $this->tag_parent_id = $tag_parent_id;
        return $this;
    }

    /**
     * Gets tag_color
     * @return string
     */
    public function getTagColor()
    {
        return $this->tag_color;
    }

    /**
     * Sets tag_color
     * @param string $tag_color
     * @return $this
     */
    public function setTagColor($tag_color)
    {

        $this->tag_color = $tag_color;
        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
