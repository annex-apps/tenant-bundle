<?php
/**
 * OrderTotalValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Annex\TenantBundle\Services\BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * OrderTotalValue Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderTotalValue implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'base_net' => 'string',
        'total' => 'string',
        'net' => 'string',
        'tax_amount' => 'string',
        'base_tax_amount' => 'string',
        'base_total' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'base_net' => 'baseNet',
        'total' => 'total',
        'net' => 'net',
        'tax_amount' => 'taxAmount',
        'base_tax_amount' => 'baseTaxAmount',
        'base_total' => 'baseTotal'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'base_net' => 'setBaseNet',
        'total' => 'setTotal',
        'net' => 'setNet',
        'tax_amount' => 'setTaxAmount',
        'base_tax_amount' => 'setBaseTaxAmount',
        'base_total' => 'setBaseTotal'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'base_net' => 'getBaseNet',
        'total' => 'getTotal',
        'net' => 'getNet',
        'tax_amount' => 'getTaxAmount',
        'base_tax_amount' => 'getBaseTaxAmount',
        'base_total' => 'getBaseTotal'
    );
  
    
    /**
      * $base_net 
      * @var string
      */
    protected $base_net;
    
    /**
      * $total 
      * @var string
      */
    protected $total;
    
    /**
      * $net 
      * @var string
      */
    protected $net;
    
    /**
      * $tax_amount 
      * @var string
      */
    protected $tax_amount;
    
    /**
      * $base_tax_amount 
      * @var string
      */
    protected $base_tax_amount;
    
    /**
      * $base_total 
      * @var string
      */
    protected $base_total;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->base_net = $data["base_net"];
            $this->total = $data["total"];
            $this->net = $data["net"];
            $this->tax_amount = $data["tax_amount"];
            $this->base_tax_amount = $data["base_tax_amount"];
            $this->base_total = $data["base_total"];
        }
    }
    
    /**
     * Gets base_net
     * @return string
     */
    public function getBaseNet()
    {
        return $this->base_net;
    }
  
    /**
     * Sets base_net
     * @param string $base_net 
     * @return $this
     */
    public function setBaseNet($base_net)
    {
        
        $this->base_net = $base_net;
        return $this;
    }
    
    /**
     * Gets total
     * @return string
     */
    public function getTotal()
    {
        return $this->total;
    }
  
    /**
     * Sets total
     * @param string $total 
     * @return $this
     */
    public function setTotal($total)
    {
        
        $this->total = $total;
        return $this;
    }
    
    /**
     * Gets net
     * @return string
     */
    public function getNet()
    {
        return $this->net;
    }
  
    /**
     * Sets net
     * @param string $net 
     * @return $this
     */
    public function setNet($net)
    {
        
        $this->net = $net;
        return $this;
    }
    
    /**
     * Gets tax_amount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->tax_amount;
    }
  
    /**
     * Sets tax_amount
     * @param string $tax_amount 
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        
        $this->tax_amount = $tax_amount;
        return $this;
    }
    
    /**
     * Gets base_tax_amount
     * @return string
     */
    public function getBaseTaxAmount()
    {
        return $this->base_tax_amount;
    }
  
    /**
     * Sets base_tax_amount
     * @param string $base_tax_amount 
     * @return $this
     */
    public function setBaseTaxAmount($base_tax_amount)
    {
        
        $this->base_tax_amount = $base_tax_amount;
        return $this;
    }
    
    /**
     * Gets base_total
     * @return string
     */
    public function getBaseTotal()
    {
        return $this->base_total;
    }
  
    /**
     * Sets base_total
     * @param string $base_total 
     * @return $this
     */
    public function setBaseTotal($base_total)
    {
        
        $this->base_total = $base_total;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
