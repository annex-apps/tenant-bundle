<?php
/**
 * Webhook
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Annex\TenantBundle\Services\BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * Webhook Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Webhook implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'subscribe_to' => 'string',
        'http_method' => 'string',
        'uri_template' => 'string',
        'body_template' => 'string',
        'content_type' => 'string',
        'id_set_accepted' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'subscribe_to' => 'subscribeTo',
        'http_method' => 'httpMethod',
        'uri_template' => 'uriTemplate',
        'body_template' => 'bodyTemplate',
        'content_type' => 'contentType',
        'id_set_accepted' => 'idSetAccepted'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'subscribe_to' => 'setSubscribeTo',
        'http_method' => 'setHttpMethod',
        'uri_template' => 'setUriTemplate',
        'body_template' => 'setBodyTemplate',
        'content_type' => 'setContentType',
        'id_set_accepted' => 'setIdSetAccepted'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'subscribe_to' => 'getSubscribeTo',
        'http_method' => 'getHttpMethod',
        'uri_template' => 'getUriTemplate',
        'body_template' => 'getBodyTemplate',
        'content_type' => 'getContentType',
        'id_set_accepted' => 'getIdSetAccepted'
    );
  
    
    /**
      * $id 
      * @var int
      */
    protected $id;
    
    /**
      * $subscribe_to 
      * @var string
      */
    protected $subscribe_to;
    
    /**
      * $http_method 
      * @var string
      */
    protected $http_method;
    
    /**
      * $uri_template 
      * @var string
      */
    protected $uri_template;
    
    /**
      * $body_template 
      * @var string
      */
    protected $body_template;
    
    /**
      * $content_type 
      * @var string
      */
    protected $content_type;
    
    /**
      * $id_set_accepted 
      * @var bool
      */
    protected $id_set_accepted;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->subscribe_to = $data["subscribe_to"];
            $this->http_method = $data["http_method"];
            $this->uri_template = $data["uri_template"];
            $this->body_template = $data["body_template"];
            $this->content_type = $data["content_type"];
            $this->id_set_accepted = $data["id_set_accepted"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets subscribe_to
     * @return string
     */
    public function getSubscribeTo()
    {
        return $this->subscribe_to;
    }
  
    /**
     * Sets subscribe_to
     * @param string $subscribe_to 
     * @return $this
     */
    public function setSubscribeTo($subscribe_to)
    {
        
        $this->subscribe_to = $subscribe_to;
        return $this;
    }
    
    /**
     * Gets http_method
     * @return string
     */
    public function getHttpMethod()
    {
        return $this->http_method;
    }
  
    /**
     * Sets http_method
     * @param string $http_method 
     * @return $this
     */
    public function setHttpMethod($http_method)
    {
        
        $this->http_method = $http_method;
        return $this;
    }
    
    /**
     * Gets uri_template
     * @return string
     */
    public function getUriTemplate()
    {
        return $this->uri_template;
    }
  
    /**
     * Sets uri_template
     * @param string $uri_template 
     * @return $this
     */
    public function setUriTemplate($uri_template)
    {
        
        $this->uri_template = $uri_template;
        return $this;
    }
    
    /**
     * Gets body_template
     * @return string
     */
    public function getBodyTemplate()
    {
        return $this->body_template;
    }
  
    /**
     * Sets body_template
     * @param string $body_template 
     * @return $this
     */
    public function setBodyTemplate($body_template)
    {
        
        $this->body_template = $body_template;
        return $this;
    }
    
    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->content_type;
    }
  
    /**
     * Sets content_type
     * @param string $content_type 
     * @return $this
     */
    public function setContentType($content_type)
    {
        
        $this->content_type = $content_type;
        return $this;
    }
    
    /**
     * Gets id_set_accepted
     * @return bool
     */
    public function getIdSetAccepted()
    {
        return $this->id_set_accepted;
    }
  
    /**
     * Sets id_set_accepted
     * @param bool $id_set_accepted 
     * @return $this
     */
    public function setIdSetAccepted($id_set_accepted)
    {
        
        $this->id_set_accepted = $id_set_accepted;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
