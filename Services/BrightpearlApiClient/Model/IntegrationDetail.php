<?php
/**
 * IntegrationDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  BrightpearlApiClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Annex\TenantBundle\Services\BrightpearlApiClient\Model;

use \ArrayAccess;
/**
 * IntegrationDetail Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     BrightpearlApiClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IntegrationDetail implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'installed_integration_id' => 'int',
        'config_set_id' => 'int',
        'provider_code' => 'string',
        'integration_type_code' => 'string',
        'active' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'installed_integration_id' => 'installedIntegrationId',
        'config_set_id' => 'configSetId',
        'provider_code' => 'providerCode',
        'integration_type_code' => 'integrationTypeCode',
        'active' => 'active'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'installed_integration_id' => 'setInstalledIntegrationId',
        'config_set_id' => 'setConfigSetId',
        'provider_code' => 'setProviderCode',
        'integration_type_code' => 'setIntegrationTypeCode',
        'active' => 'setActive'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'installed_integration_id' => 'getInstalledIntegrationId',
        'config_set_id' => 'getConfigSetId',
        'provider_code' => 'getProviderCode',
        'integration_type_code' => 'getIntegrationTypeCode',
        'active' => 'getActive'
    );
  
    
    /**
      * $installed_integration_id 
      * @var int
      */
    protected $installed_integration_id;
    
    /**
      * $config_set_id 
      * @var int
      */
    protected $config_set_id;
    
    /**
      * $provider_code 
      * @var string
      */
    protected $provider_code;
    
    /**
      * $integration_type_code 
      * @var string
      */
    protected $integration_type_code;
    
    /**
      * $active 
      * @var bool
      */
    protected $active;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->installed_integration_id = $data["installed_integration_id"];
            $this->config_set_id = $data["config_set_id"];
            $this->provider_code = $data["provider_code"];
            $this->integration_type_code = $data["integration_type_code"];
            $this->active = $data["active"];
        }
    }
    
    /**
     * Gets installed_integration_id
     * @return int
     */
    public function getInstalledIntegrationId()
    {
        return $this->installed_integration_id;
    }
  
    /**
     * Sets installed_integration_id
     * @param int $installed_integration_id 
     * @return $this
     */
    public function setInstalledIntegrationId($installed_integration_id)
    {
        
        $this->installed_integration_id = $installed_integration_id;
        return $this;
    }
    
    /**
     * Gets config_set_id
     * @return int
     */
    public function getConfigSetId()
    {
        return $this->config_set_id;
    }
  
    /**
     * Sets config_set_id
     * @param int $config_set_id 
     * @return $this
     */
    public function setConfigSetId($config_set_id)
    {
        
        $this->config_set_id = $config_set_id;
        return $this;
    }
    
    /**
     * Gets provider_code
     * @return string
     */
    public function getProviderCode()
    {
        return $this->provider_code;
    }
  
    /**
     * Sets provider_code
     * @param string $provider_code 
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        
        $this->provider_code = $provider_code;
        return $this;
    }
    
    /**
     * Gets integration_type_code
     * @return string
     */
    public function getIntegrationTypeCode()
    {
        return $this->integration_type_code;
    }
  
    /**
     * Sets integration_type_code
     * @param string $integration_type_code 
     * @return $this
     */
    public function setIntegrationTypeCode($integration_type_code)
    {
        
        $this->integration_type_code = $integration_type_code;
        return $this;
    }
    
    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->active;
    }
  
    /**
     * Sets active
     * @param bool $active 
     * @return $this
     */
    public function setActive($active)
    {
        
        $this->active = $active;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
